package main

import (
	"fmt"
)

func main() {
	/*
				new(T) 返回一个指向类型为 T，值为 0 的地址的指针,它适用于值类型如数组和结构体,相当于 &T{},
					   会为每个新的类型 T 分配一片内存，初始化为 0 并且返回类型为 *T 的内存地址
				make(T) 返回一个类型为 T 的初始值,它只适用于 3 种内建的引用类型：切片、map 和 channel;

				内建函数make分配并初始化一个类型为切片、映射、或通道的对象。其第一个实参为类型，而非值。
				make的返回类型与其参数相同，而非指向它的指针。其具体结果取决于具体的类型：

				切片：size指定了其长度。该切片的容量等于其长度。切片支持第二个整数实参可用来指定不同的容量；
		     		它必须不小于其长度，因此 make([]int, 0, 10) 会分配一个长度为0，容量为10的切片。
				映射：初始分配的创建取决于size，但产生的映射长度为0。size可以省略，这种情况下就会分配一个
		     		小的起始大小。
				通道：通道的缓存根据指定的缓存容量初始化。若 size为零或被省略，该信道即为无缓存的。
	*/
	var m map[int]string //直接声明一个map，指向nil
	fmt.Println(m)
	m = make(map[int]string) //初始化后，给该map分配了一块内存空间来存储value
	fmt.Println(m)
}
